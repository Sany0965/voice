import hashlib
import requests
import logging
from telebot import TeleBot, types
from spellchecker import SpellChecker
import soundfile as sf
import speech_recognition as sr
from moviepy.editor import VideoFileClip, AudioFileClip
import os
import asyncio

TELEGRAM_KEY = '—Ç–æ–∫–µ–Ω –æ—Ç –±–æ—Ç —Ñ–∞–∑–µ—Ä'
VOICE_LANGUAGE = 'ru-RU'
MAX_MESSAGE_SIZE = 50 * 1024 * 1024
MAX_MESSAGE_DURATION = 120

bot = TeleBot(TELEGRAM_KEY)

spell = SpellChecker()

greeted_users = set()

@bot.message_handler(commands=['start'])
def start_prompt(message):
    greeted_users.add(message.chat.id)  # –î–æ–±–∞–≤–ª—è–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ greeted_users
    user_name = message.from_user.first_name
    reply = ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –Ø –º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Çüòé.\n"
             "–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø—Ä–∏—à–ª—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É.\n"
             "–ò –¥–∞–∂–µ Telegram premium –Ω–µ –Ω—É–∂–µ–Ω!\n"
             "<b>‚ò¢–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç!</b>").format(user_name=user_name)
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="üü†Dev", url="https://t.me/pizzaway")
    keyboard.add(url_button)
    bot.send_message(message.chat.id, reply, parse_mode="HTML", reply_markup=keyboard)


@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    received_message = bot.reply_to(message, "ü§ñ–ê—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!–ñ–¥–∏—Ç–µ!")
    asyncio.run(remove_message(received_message, 2))
    process_audio_message(message)

@bot.message_handler(content_types=['video_note'])
def handle_video_message(message):
    received_message = bot.reply_to(message, "ü§ñ–í–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!–ñ–¥–∏—Ç–µ!")
    asyncio.run(remove_message(received_message, 2))
    process_video_message(message)

async def remove_message(message, delay):
    await asyncio.sleep(delay)
    bot.delete_message(message.chat.id, message.message_id)

def process_audio_message(message):
    data = message.voice
    if (data.file_size > MAX_MESSAGE_SIZE) or (data.duration > MAX_MESSAGE_DURATION):
        reply = f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {MAX_MESSAGE_DURATION} —Å–µ–∫."
        return bot.reply_to(message, reply)

    file_url = "https://api.telegram.org/file/bot{}/{}".format(
        bot.token,
        bot.get_file(data.file_id).file_path
    )

    file_path = download_file(file_url)
    convert_to_pcm16(file_path)
    text = process_audio_file("new.wav")

    if not text:
        return bot.reply_to(message, "–ë–æ—Çü§ñ:–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!.")
    
    text_with_punctuation = add_punctuation(text)
    bot.reply_to(message, f"ü§ñ–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {text_with_punctuation}")
    cleanup_files(["new.wav", "voice_message.ogg"])

def process_video_message(message):
    data = message.video_note
    if (data.file_size > MAX_MESSAGE_SIZE):
        reply = f"–í–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_MESSAGE_SIZE} –±–∞–π—Ç."
        return bot.reply_to(message, reply)

    file_url = "https://api.telegram.org/file/bot{}/{}".format(
        bot.token,
        bot.get_file(data.file_id).file_path
    )

    file_path = download_video(file_url)
    convert_to_ogg(file_path)
    convert_to_wav("new.ogg")
    text = process_audio_file("new.wav")

    if not text:
        return bot.reply_to(message, "–ë–æ—Çü§ñ:–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!.")
    
    text_with_punctuation = add_punctuation(text)
    bot.reply_to(message, f"ü§ñ–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∏: {text_with_punctuation}")
    cleanup_files(["new.ogg", "new.wav"])

def download_file(file_url):
    file_path = "voice_message.ogg"
    with open(file_path, 'wb') as f:
        response = requests.get(file_url)
        f.write(response.content)
    return file_path

def download_video(file_url):
    file_path = "video_note.mp4"
    with open(file_path, 'wb') as f:
        response = requests.get(file_url)
        f.write(response.content)
    return file_path

def convert_to_pcm16(file_path):
    data, samplerate = sf.read(file_path)
    sf.write('new.wav', data, samplerate, subtype='PCM_16')

def convert_to_ogg(file_path):
    video = VideoFileClip(file_path)
    video.audio.write_audiofile("new.ogg", codec='libvorbis')

def convert_to_wav(file_path):
    clip = AudioFileClip(file_path)
    clip.write_audiofile("new.wav", codec='pcm_s16le', fps=44100)

def process_audio_file(file_path):
    recognizer = sr.Recognizer()
    with sr.AudioFile(file_path) as source:
        audio_data = recognizer.record(source)
    try:
        text = recognizer.recognize_google(audio_data, language=VOICE_LANGUAGE)
        return text
    except sr.UnknownValueError:
        return None

def add_punctuation(text):
    corrected_text = spell.correction(text)
    if corrected_text is None:
        return text
    
    if not corrected_text.endswith('.'):
        corrected_text += '.'
    return corrected_text

def cleanup_files(files):
    for file in files:
        if os.path.exists(file):
            os.remove(file)

bot.polling()